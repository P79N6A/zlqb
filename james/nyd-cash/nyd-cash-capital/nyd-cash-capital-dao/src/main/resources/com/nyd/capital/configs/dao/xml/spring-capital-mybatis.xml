<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/aop  
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

    <context:annotation-config/>
    <!-- 默认扫描的包路径 -->
    <context:component-scan base-package="com.tasfe.framework.crud,com.nyd.capital.dao"/>

    <!-- ASPECTJ注解 proxy-target-class="true" -->
    <aop:aspectj-autoproxy/>

    <!-- 数据库连接池 -->
   <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:configs/jdbc.properties"/>
    </bean>-->

    <!-- 数据源 -->
    <bean id="financeDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${finance.mysql.url}"/>
        <property name="username" value="${finance.mysql.username}"/>
        <property name="password" value="${finance.mysql.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="true"/>
    </bean>

    <!-- 数据源 -->
    <bean id="userDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${user.mysql.url}"/>
        <property name="username" value="${user.mysql.username}"/>
        <property name="password" value="${user.mysql.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="true"/>
    </bean>
    <!-- 数据源 -->
    <bean id="zeusDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${zeus.mysql.url}"/>
        <property name="username" value="${zeus.mysql.username}"/>
        <property name="password" value="${zeus.mysql.password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="true"/>
    </bean>
    <bean id="dataSource" class="com.nyd.capital.dao.ds.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="financeDataSource" value-ref="financeDataSource"/>
                <entry key="userDataSource" value-ref="userDataSource"/>
                <entry key="zeusDataSource" value-ref="zeusDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="financeDataSource"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描mybatis配置文件 -->
        <property name="configLocation" value="classpath:/com/nyd/capital/configs/dao/xml/mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件,这里可增加自定的mapper.xml文件 -->
        <property name="mapperLocations">
            <array>
                <value>com/nyd/capital/configs/dao/mappers/TFundMapper.xml</value>
                <value>com/nyd/capital/configs/dao/mappers/TKzjrProductConfigMapper.xml</value>
                <value>com/nyd/capital/configs/dao/mappers/TFailorderKzjrMapper.xml</value>
                <value>com/nyd/capital/configs/dao/mappers/UserJxMapper.xml</value>
                <value>com/nyd/capital/configs/dao/mappers/UserDldMapper.xml</value>
                <value>com/nyd/capital/configs/dao/mappers/UserDldLoanMapper.xml</value>
                <value>com/nyd/capital/configs/dao/mappers/UserPocketMapper.xml</value>
            </array>
        </property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 定义的mapper必须从这配置包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tasfe.framework.crud.dao,com.tasfe.framework.crud.test.mysql.dao,com.nyd.capital.dao.mappers"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!-- 配置事务的传播特性 -->
    <!--  <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
          <property name="transactionManager" ref="transactionManager"/>
          <property name="transactionAttributes">
              <props>
                  <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                  <prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
                  <prop key="upd*">PROPAGATION_REQUIRED,-Exception</prop>
                  <prop key="get*">PROPAGATION_NEVER,readOnly</prop>
                  <prop key="query*">PROPAGATION_NEVER,readOnly</prop>
                  <prop key="*">PROPAGATION_NEVER,readOnly</prop>
              </props>
          </property>
      </bean>
      <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
          <property name="proxyTargetClass" value="true"/>
          <property name="beanNames">
              <list>
                  <value>*Service</value>
              </list>
          </property>
          <property name="interceptorNames">
              <list>
                  <value>transactionInterceptor</value>
              </list>
          </property>
      </bean>-->

</beans>