<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:annotation-config/>
    <!-- 默认扫描的包路径 -->
   <!-- <context:component-scan base-package="com.creativearts.projects.crud"/>-->

    <!-- ASPECTJ注解 proxy-target-class="true" -->
    <aop:aspectj-autoproxy/>

    <!-- 数据库连接池 -->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:com/tasfe/sis/configs/base/dao/propertjdbc.propertiesties"/>
    </bean>-->

    <!-- 数据源 dbcp -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
         <property name="driverClassName" value="${mysql.driver}"/>
         <property name="url" value="${mysql.url}"/>
         <property name="username" value="${mysql.username}"/>
         <property name="password" value="${mysql.password}"/>
         &lt;!&ndash; 初始化连接大小 &ndash;&gt;
         <property name="initialSize" value="${jdbc.pool.initialSize}"/>
         &lt;!&ndash; 连接池最大数量 &ndash;&gt;
         <property name="maxActive" value="${jdbc.pool.maxActive}"/>
         &lt;!&ndash; 连接池最大空闲 &ndash;&gt;
         <property name="maxIdle" value="${jdbc.pool.maxIdle}"/>
         &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
         <property name="minIdle" value="${jdbc.pool.minIdle}"/>
         &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
         <property name="maxWait" value="${jdbc.pool.maxWait}"/>
     </bean>
     -->

    <!-- 数据源 druid -->
    <bean id="mybatisDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.mysql.driver}"/>
        <property name="url" value="${jdbc.mysql.url}"/>
        <property name="username" value="${jdbc.mysql.username}"/>
        <property name="password" value="${jdbc.mysql.password}"/>


        <!-- 超时时间；单位为秒。180秒=3分钟 -->
        <property name="removeAbandonedTimeout" value="${jdbc.pool.removeAbandonedTimeout}"/>
        <property name="maxActive" value="${jdbc.pool.maxPoolSize}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.pool.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${jdbc.pool.validationQuery} "/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="mybatisDataSource"/>
        <!-- 扫描mybatis配置文件 -->
        <property name="configLocation" value="classpath:/mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件,这里可增加自定的mapper.xml文件 -->
        <!--<property name="mapperLocations" value="mappers/DistrictMapper.xml"/>-->
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.creativearts.projects.crud.dao,com.zh.dictionary.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager-mybatis" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="mybatisDataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager-mybatis"/>


    <!-- 配置事务的传播特性 -->
    <!--  <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
          <property name="transactionManager" ref="transactionManager"/>
          <property name="transactionAttributes">
              <props>
                  <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                  <prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
                  <prop key="upd*">PROPAGATION_REQUIRED,-Exception</prop>
                  <prop key="get*">PROPAGATION_NEVER,readOnly</prop>
                  <prop key="query*">PROPAGATION_NEVER,readOnly</prop>
                  <prop key="*">PROPAGATION_NEVER,readOnly</prop>
              </props>
          </property>
      </bean>
      <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
          <property name="proxyTargetClass" value="true"/>
          <property name="beanNames">
              <list>
                  <value>*Service</value>
              </list>
          </property>
          <property name="interceptorNames">
              <list>
                  <value>transactionInterceptor</value>
              </list>
          </property>
      </bean>-->

</beans>