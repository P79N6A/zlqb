<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
	http://www.springframework.org/schema/jee  http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd"
       default-lazy-init="true">


    <context:property-placeholder location="classpath:application.properties"/>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!-- Spring JPA -->

    <!-- 配置 JPA 的 EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"></property>

        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
        </property>

        <!-- entity package-->
        <property name="packagesToScan" value="com.tasfe.sis.base.dao.test"></property>

        <property name="jpaProperties">
            <props>
                <!-- 基本属性 -->
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <!-- 生成的数据表的列的映射策略 -->
                <!--<prop key="hiberante.ejb.naming_startegy">${hiberante.ejb.namingStartegy}</prop>-->
                <prop key="hiberante.ejb.naming_startegy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <!-- 二级缓存相关 -->
                <!--
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache-hibernate.xml</prop>
                -->
            </props>
        </property>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManagerJPA" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"></property>
    </bean>

    <!-- 配置注解的事物-->
    <tx:annotation-driven transaction-manager="transactionManagerJPA"></tx:annotation-driven>

    <!-- 配置 SpringData -->
    <!-- 加入  jpa 的命名空间 -->
    <!-- base-package: 扫描base-package下所有继承于Repository<T,ID>的接口 -->
    <jpa:repositories base-package="com.tasfe.sis.base.dao"
                      factory-class="com.tasfe.zh.base.dao.adapter.GenericJpaRepositoryFactoryBean"
                      entity-manager-factory-ref="entityManagerFactory"
                      transaction-manager-ref="transactionManagerJPA">
        <!-- 排除 BaseDao接口,或者在该接口上标注@NoRepositoryBean-->
        <!--<exclude-filter type="assignable" expression="com.springdata.jpa.extension.mybatis.v2.base.BaseRepositoryository"/>-->
    </jpa:repositories>


    <!-- 定义aspectj -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!-- 定义使用事务的方法 -->
    <!--<tx:advice id="txAdviceJPA" transaction-manager="transactionManagerJPA">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>-->
    <!-- 定义一个切入点，使事务在它的切入点内有效 -->
    <!--<aop:config>
        <aop:pointcut expression="execution(* com.yaobai.platform.service.*.*Service.*(..))"
                      id="pointcut" />
        <aop:advisor pointcut-ref="pointcut" advice-ref="txAdviceJPA" />
    </aop:config>-->

    <!-- mybatis 配置 -->

    <!-- sqlSessionFactory -->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>

        <!-- 指定 domain 路径,为Java类型命名一个短的别名,例如:com.yougou.domainn.Category 的别名是Category -->
        <property name="typeAliasesPackage" value="com.tasfe.sis.base.dao.test"></property>

        <!--  指定单个类
        <property name="typeAliases" value="com.yougou.domain."></property>-->

        <!-- 指定mapper.xml路径 -->
        <property name="mapperLocations" value="classpath:TmpUser.xml"/>

        <!-- 1.配置mybatis属性第一种方式:指定 mybatis的配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml" />-->

        <!-- 2.配置mybatis属性第二种方式:直接配置mybatis属性。-->
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="cacheEnabled" value="${mybatis.cacheEnabled}"/>
                <property name="useGeneratedKeys" value="${mybatis.useGeneratedKeys}"/>
                <property name="defaultExecutorType" value="${mybatis.defaultExecutorType}"/>
                <property name="mapUnderscoreToCamelCase" value="${mybatis.mapUnderscoreToCamelCase}"/>
                <property name="lazyLoadingEnabled" value="${mybatis.lazyLoadingEnabled}"/>
                <property name="multipleResultSetsEnabled" value="${mybatis.multipleResultSetsEnabled}"/>
                <property name="useColumnLabel" value="${mybatis.useColumnLabel}"/>
                <property name="defaultStatementTimeout" value="${mybatis.defaultStatementTimeout}"/>
            </bean>
        </property>

        <property name="plugins">
            <list>
                <bean class="com.tasfe.zh.base.dao.mybatis.plugins.page.support.PageInterceptor">
                    <property name="properties">

                        <map>
                            <entry key="dialect" value="mysql"/>
                            <entry key="reasonable" value="false"/>
                        </map>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!-- scan for mappers and let them be autowired,类和xml在同一目录中,名称相同,则自动绑定  -->
    <!--<mybatis:scan base-package="com.tasfe.sis.base.dao.test"/>-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.tasfe.sis.base.dao.test"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!-- mybatis 事物托管给spring-->
    <bean name="transcationManagerMybatis" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transcationManagerMybatis"/>

    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->


    <!-- 定义使用事务的方法 -->
    <!--<tx:advice id="txAdviceJPA" transaction-manager="transactionManagerJPA">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>-->
    <!-- 定义一个切入点，使事务在它的切入点内有效 -->
    <!--<aop:config>
        <aop:pointcut expression="execution(* com.yaobai.platform.service.*.*Service.*(..))"
                      id="pointcut" />
        <aop:advisor pointcut-ref="pointcut" advice-ref="txAdviceJPA" />
    </aop:config>-->
</beans>
