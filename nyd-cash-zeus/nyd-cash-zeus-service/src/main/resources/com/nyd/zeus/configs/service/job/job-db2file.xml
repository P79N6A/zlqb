<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">

    <description>从数据库读取记录写到文件中</description>
    <import resource="classpath:/com/nyd/zeus/configs/service/job/job-context.xml"/>
<!--
    <import resource="classpath:/com/nyd/zeus/configs/service/job/job-partition-file.xml"/>
-->
    <batch:job id="readDB2FileJob">
       <!-- <batch:step id="readWsmDb2FileStep" next="readNydDb2FileStep">
            <batch:tasklet>
                <batch:chunk reader="jdbcWsmItemReader" writer="multiTypesItemWriter" commit-interval="500" ></batch:chunk>
            </batch:tasklet>
        </batch:step>
        <batch:step id="readNydDb2FileStep" next="calcuteStep">
            <batch:tasklet>
                <batch:chunk reader="jdbcNydItemReader" writer="multiTypesItemWriter" commit-interval="500" ></batch:chunk>
            </batch:tasklet>
        </batch:step>-->
        <!--<batch:step id="calcuteStep" next="todbStep">
            <partition step="aggreReadWriteStep" partitioner="filePartitioner">
                <handler grid-size="2" task-executor="taskExecutor"/>
            </partition>
        </batch:step>-->
        <batch:step id="todbStep">
            <partition step="file2dbStep" partitioner="file2dbPartitioner">
                <handler grid-size="2" task-executor="taskExecutor"/>
            </partition>
        </batch:step>
    </batch:job>

    <!--第四步 入库开始***********************-->
    <batch:step id="file2dbStep">
        <tasklet>
            <chunk reader="toDBflatFileItemReader" writer="toDbjdbcItemWriter" commit-interval="20" />
        </tasklet>
    </batch:step>

    <bean id="file2dbPartitioner"
               class="org.springframework.batch.core.partition.support.MultiResourcePartitioner">
        <property name="keyName" value="fileName"/>
        <property name="resources" value="file:E:/result/*.csv"/>
    </bean>

    <bean id="toDBflatFileItemReader" scope="step"
               class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource"
                       value="#{stepExecutionContext[fileName]}"/>
        <property name="lineMapper" ref="toDblineMapper" />
    </bean>

    <bean id="toDblineMapper"
               class="org.springframework.batch.item.file.mapping.DefaultLineMapper" >
        <property name="lineTokenizer" ref="toDbdelimitedLineTokenizer" />
        <property name="fieldSetMapper" ref="toDbFieldSetMapper"/>
    </bean>

    <bean id="toDbdelimitedLineTokenizer"
               class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value=","/>
        <property name="names" value="orderNo,amount,contractStartTime,contractEndTime,reconciliationDay,fundCode,remitStatus,resultCode,amountOwn" />
    </bean>

    <bean id="toDbFieldSetMapper"
               class="com.nyd.zeus.service.batch.ToDbFieldSetMapper">
    </bean>

    <bean id="toDbjdbcItemWriter"
               class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSourceJob"/>
        <property name="sql" value="insert into t_result (order_no,amount,contract_start_time,contract_end_time,reconciliation_day,fund_code,remit_status,amount_own,result_code) values (:orderNo,:amount,:contractStartTime,:contractEndTime,:reconciliationDay,:fundCode,:remitStatus,:amountOwn,:resultCode)"/>
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
    </bean>
    <!--第四步 入库结束***********************-->

    <!-- jdbc Reader  第一步 读数据库 -->
    <bean id="jdbcWsmItemReader" class="com.nyd.zeus.service.batch.NewJdbcCursorItemReader" scope="step">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSourceJob"></property>
        <!-- 游标一次读多少行 -->
        <property name="fetchSize" value="500"></property>
        <!-- 查询sql -->
        <property name="sql">
            <value>
                <![CDATA[
                SELECT merchant_order_no,amount,contract_start_time,contract_end_time,reconciliation_day,'1' as flag FROM ?
                ]]>
            </value>
        </property>
        <property name="tableName" value="#{jobParameters['billWsmTable']}"/>
        <!-- 行映射对象 -->
        <property name="rowMapper" ref="reconciliationWsmMapper">
        </property>
    </bean>
    <bean id="reconciliationWsmMapper" class="com.nyd.zeus.service.batch.ReconciliationWsmMapper"/>

    <bean id="jdbcNydItemReader" class="com.nyd.zeus.service.batch.NewJdbcCursorItemReader" scope="step">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSourceJob"></property>
        <!-- 游标一次读多少行 -->
        <property name="fetchSize" value="500"></property>
        <!-- 查询sql -->
        <property name="sql">
            <value>
                <![CDATA[
                SELECT order_no,remit_amount,fund_code,remit_status,'2' as flag FROM ?
                ]]>
            </value>
        </property>
        <property name="tableName" value="#{jobParameters['billNydTable']}"/>
        <!-- 行映射对象 -->
        <property name="rowMapper" ref="reconciliationNydMapper">
        </property>
    </bean>
    <bean id="reconciliationNydMapper" class="com.nyd.zeus.service.batch.ReconciliationNydMapper"/>
    <!-- write to file Writer -->
    <bean id="fileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="prototype">
        <!-- 输出文件 -->
      <!-- <property name="resource" value="file:E:/tmp/out.log"></property>-->
        <!-- 如果目标文件已存在，是否删除 -->
        <property name="shouldDeleteIfExists" value="false"></property>
        <property name="appendAllowed" value="true"></property>
        <!-- 行策略 -->
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <!--  逗号分隔 -->
                <property name="delimiter" value=","></property>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <!-- 行数据（字段、顺序） -->
                        <property name="names" value="orderNo,amount,contractStartTime,contractEndTime,reconciliationDay,fundCode,remitStatus,flag"></property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="multiTypesItemWriter"
               class="com.nyd.zeus.service.batch.WsmMultiItemWriter"  scope="step">
        <property name="directoryPath" value="#{jobParameters['timede']}"/>
        <property name="num" value="3"/>
    </bean>








<!-- 第三步 计算差异 开始  ********************************************-->
    <batch:step id="aggreReadWriteStep">
        <tasklet>
            <chunk reader="flatFileItemReader" writer="aggreSubFileWriter" chunk-completion-policy="myCompletionPloicy"/>

        </tasklet>
    </batch:step>
    <!--<bean id="aggreFileWriter" class="com.nyd.zeus.service.batch.CalcuteFileWriter" scope="step">
        <property name="itemWriter" ref="aggreSubFileWriter"/>
    </bean>-->
    <bean id="aggreSubFileWriter" class="com.nyd.zeus.service.batch.MyFlatFileItemWriter" scope="step">
        <!-- 输出文件 -->
       <!-- <property name="resource" value="#{jobParameters['resultDe']}#{stepExecutionContext['simpleName']}"></property>-->
        <property name="resource" value="file:E:/result/#{stepExecutionContext['simpleName']}"></property>
        <!-- 如果目标文件已存在，是否删除 -->
        <property name="shouldDeleteIfExists" value="true"></property>
        <property name="appendAllowed" value="false"></property>
        <!-- 行策略 -->
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <!--  逗号分隔 -->
                <property name="delimiter" value=","></property>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <!-- 行数据（字段、顺序） -->
                        <property name="names" value="orderNo,amount,contractStartTime,contractEndTime,reconciliationDay,fundCode,remitStatus,resultCode,amountOwn"></property>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>



    <bean id="filePartitioner"
          class="com.nyd.zeus.service.batch.MyMultiResourcePartitioner" scope="step">
        <property name="keyName" value="fileName"/>
        <!--<property name="resources" value="#{jobParameters['timede']}/*.csv"/>-->
        <property name="resources" value="file:E:/tmp/1511789843671/*.csv"/>
    </bean>

    <bean id="myCompletionPloicy" class="com.nyd.zeus.service.batch.MyCompletionPloicy"/>

    <bean id="flatFileItemReader" scope="step"
          class="org.springframework.batch.item.file.FlatFileItemReader" >
        <property name="resource"
                  value="#{stepExecutionContext['fileName']}"/>
        <property name="lineMapper" ref="lineMapper" />
    </bean>

    <bean id="lineMapper"
          class="org.springframework.batch.item.file.mapping.DefaultLineMapper" >
        <property name="lineTokenizer" ref="delimitedLineTokenizer" />
        <property name="fieldSetMapper" ref="billWsmFieldSetMapper"/>
    </bean>

    <bean id="delimitedLineTokenizer"
          class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value=","/>
        <property name="names" value="orderNo,amount,contractStartTime,contractEndTime,reconciliationDay,fundCode,remitStatus,flag" />
    </bean>

    <bean id="billWsmFieldSetMapper"
          class="com.nyd.zeus.service.batch.BillWsmFieldSetMapper">
    </bean>

    <!-- 第三步 计算差异 结束 ********************************* -->

    <bean id="jdbcItemWriter"
          class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="dataSource" ref="dataSourceJob"/>
        <property name="sql" value="insert into t_destcredit (ID,ACCOUNTID,NAME,AMOUNT,DATE,ADDRESS) values (:id,:accountID,:name,:amount,:date,:address)"/>
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
    </bean>



    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="6"/>
        <property name="maxPoolSize" value="15"/>
    </bean>


</beans>