package com.nyd.msg.test;

import com.alibaba.fastjson.JSON;
import com.nyd.msg.model.SmsRequest;
import com.nyd.msg.model.SmsRequestBatch;
import com.nyd.msg.service.ISendSmsService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.List;

/**
 * Cong Yuxiang
 * 2017/12/20
 **/
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {"classpath:com/nyd/msg/configs/ws/nyd-msg-application.xml"})
public class MsgTest {
    @Autowired
    private ISendSmsService sendSmsService;
    @Test
    public void testYXBatch(){
        SmsRequestBatch batch = new SmsRequestBatch();
        List<String> phones = new ArrayList<>();
        //phones.add("13472483182");
        phones.add("15618624753");
        phones.add("13614165253");
        phones.add("18706053835");
        phones.add("15051421562");
        phones.add("13650807834");
        phones.add("18363731732");
        phones.add("13812641341");
        phones.add("18704436799");
        phones.add("15216695628");
        phones.add("13915562117");
        phones.add("15060348280");
        phones.add("13437305962");
        phones.add("18728404493");
        phones.add("13113097041");
        phones.add("13720342439");
        phones.add("15067119800");
        phones.add("14747312813");
        phones.add("13514315050");
        phones.add("18790319531");
        phones.add("18734212341");
        phones.add("18526870227");
        phones.add("15512932071");
        phones.add("13545547266");
        phones.add("13695992025");
        phones.add("13459824542");
        phones.add("13251516563");
        phones.add("15060348280");
        phones.add("14769264769");
        phones.add("18682012479");
        phones.add("15386995123");
        phones.add("15733456777");
        phones.add("13060049993");
        phones.add("13845414495");
        phones.add("16639642757");
        phones.add("13335201222");
        phones.add("13286505433");
        phones.add("19909442227");
        phones.add("18585039700");
        phones.add("15810882032");
        phones.add("13356605635");
        phones.add("15750236020");
        phones.add("13214111997");
        phones.add("13727727177");
        phones.add("18704611678");
        phones.add("17347995399");
        phones.add("13354041000");
        phones.add("13952061248");
        phones.add("18211977088");
        phones.add("13345129818");
        phones.add("18518596482");
        phones.add("13631946838");
        phones.add("18971873055");
        phones.add("15733093229");
        phones.add("15912068091");
        phones.add("15247599539");
        phones.add("13437386288");
        phones.add("13003995561");
        phones.add("13802771670");
        phones.add("15808381264");
        phones.add("13723201180");
        phones.add("18775723025");
        phones.add("15800271257");
        phones.add("17774420652");
        phones.add("18650053225");
        phones.add("15078727424");
        phones.add("15012180723");
        phones.add("18820266884");
        phones.add("13861870284");
        phones.add("18729161128");
        phones.add("15844441044");
        phones.add("13530950516");
        phones.add("18978197434");
        phones.add("17716871040");
        phones.add("13699810875");
        phones.add("18663139344");
        phones.add("15700073782");
        phones.add("18763793502");
        phones.add("15062712497");
        phones.add("13662088359");
        phones.add("13167328844");
        phones.add("13737217881");
        phones.add("13466223716");
        phones.add("13644068800");
        phones.add("18371892703");
        phones.add("13806881234");
        phones.add("15282436995");
        phones.add("15655259992");
        phones.add("13266190662");
        phones.add("18226792820");
        phones.add("15521276166");
        phones.add("13874061010");
        phones.add("15847877886");
        phones.add("13464134912");
        phones.add("18271737452");
        phones.add("18087970400");
        phones.add("15880656496");
        phones.add("15016555554");
        phones.add("18363018288");
        phones.add("15637578617");
        phones.add("18332032512");
        phones.add("13134347077");
        phones.add("13885244502");
        phones.add("17721436136");
        phones.add("15951482858");
        phones.add("15360977318");
        phones.add("18778026913");
        phones.add("18647511194");
        phones.add("15738280131");
        phones.add("15847877886");
        phones.add("15655255373");
        phones.add("15269964754");
        phones.add("15134816097");
        phones.add("13038211182");
        phones.add("15034531051");
        phones.add("18719306351");
        phones.add("13733349769");
        phones.add("15725413630");
        phones.add("15325663757");
        phones.add("18267773383");
        phones.add("15022608710");
        phones.add("13699810875");
        phones.add("18262087517");
        phones.add("13507999995");
        phones.add("13876208416");
        phones.add("18752037851");
        phones.add("18801599612");
        phones.add("13430978964");
        phones.add("15766774905");
        phones.add("15391136234");
        phones.add("13963833060");
        phones.add("13966416970");
        phones.add("15160623225");
        phones.add("17753156265");
        phones.add("18501779120");
        phones.add("13987234187");
        phones.add("13925757671");
        phones.add("18505946555");
        phones.add("18520508817");
        phones.add("18984099967");
        phones.add("15088970853");
        phones.add("15959855520");
        phones.add("18903925918");
        phones.add("13895500318");
        phones.add("18607879914");
        phones.add("15123887858");
        phones.add("13580543835");
        phones.add("18601138624");
        phones.add("18358016519");
        phones.add("18696145283");
        phones.add("13888454094");
        phones.add("13389033868");
        phones.add("15275350870");
        phones.add("2883176064");
        phones.add("13516884295");
        phones.add("18380716840");
        phones.add("15702445687");
        phones.add("13645839986");
        phones.add("13191250201");
        phones.add("13837411156");
        phones.add("18907992427");
        phones.add("13951199858");
        phones.add("15841674564");
        phones.add("18800119238");
        phones.add("13911712801");
        phones.add("13189200110");
        phones.add("15957348806");
        phones.add("13478008285");
        phones.add("13109456885");
        phones.add("18656512394");
        phones.add("18679827050");
        phones.add("18608038301");
        phones.add("13453926490");
        phones.add("18832535703");
        phones.add("16643416878");
        phones.add("15088750931");
        phones.add("15982523770");
        phones.add("15902386805");
        phones.add("13506871106");
        phones.add("13729594578");
        phones.add("18588777467");
        phones.add("18743908787");
        phones.add("15161885670");
        phones.add("18289778227");
        phones.add("13725522676");
        phones.add("17608742457");
        phones.add("18103999929");
        phones.add("15247599539");
        phones.add("18550543418");
        phones.add("13606720558");
        phones.add("13959980967");
        phones.add("18386393378");
        phones.add("13694910521");
        phones.add("13642459299");
        phones.add("15043853444");
        phones.add("13096999871");
        phones.add("18718721507");
        phones.add("18669498006");
        phones.add("15872601533");
        phones.add("15984120618");
        phones.add("13826050175");
        phones.add("13765885885");
        phones.add("15987172418");
        phones.add("13543996138");
        phones.add("13478825141");
        phones.add("14760988875");
        phones.add("15853598539");
        phones.add("17738185672");
        phones.add("13823898760");
        phones.add("18950903732");
        phones.add("15959246921");
        phones.add("15120889554");
        phones.add("13999416801");
        phones.add("18993962383");
        phones.add("18871879741");
        phones.add("13772424102");
        phones.add("18385009947");
        phones.add("13455833666");
        phones.add("13580543835");
        phones.add("15833303813");
        phones.add("18219653712");
        phones.add("15868862240");
        phones.add("13177063088");
        phones.add("13531903327");
        phones.add("18343463330");
        phones.add("13881764115");
        phones.add("13503504661");
        phones.add("13959980967");
        phones.add("15838241050");
        phones.add("15803565010");
        phones.add("18200967279");
        phones.add("13320234331");
        phones.add("18734239044");
        phones.add("13765011856");
        phones.add("18371538195");
        phones.add("18360470271");
        phones.add("15730352166");
        phones.add("13737941310");
        phones.add("13977109383");
        phones.add("13548612301");
        phones.add("15260878691");
        phones.add("13647522391");
        phones.add("18217998827");
        phones.add("15307498310");
        phones.add("15078250175");
        phones.add("15826996625");
        phones.add("15952523504");
        phones.add("13676641867");
        phones.add("13738934806");
        phones.add("15842367000");
        phones.add("18652588854");
        phones.add("13659788789");
        phones.add("15838241050");
        phones.add("18212282121");
        phones.add("13605753770");
        phones.add("15163588236");
        phones.add("13806881234");
        phones.add("15267379924");
        phones.add("15007277161");
        phones.add("18778367023");
        phones.add("15119481618");
        phones.add("18627054306");
        phones.add("13528984338");
        phones.add("13005082825");
        phones.add("18335310163");
        phones.add("15890884444");
        phones.add("18227601413");
        phones.add("15735376770");
        phones.add("15002352782");
        phones.add("13467223402");
        phones.add("15819539111");
        phones.add("18686003544");
        phones.add("15123256067");
        phones.add("15150984447");
        phones.add("17635743748");
        phones.add("13939051806");
        phones.add("15020672706");
        phones.add("15264646664");
        phones.add("18300148570");
        phones.add("15776697564");
        phones.add("13765806075");
        phones.add("13889707750");
        phones.add("15735376770");
        phones.add("13257652103");
//        phones.add("13656253675");
        //phones.add("15618624753");
        int i =phones.size()/50;
        if(phones.size()%50>0){
            i=i+1;
        }
        System.out.println(i);
        for(int j=0;j<i;j++) {
            System.out.println(j);
            List<String> list;
            if((j+1)*50>phones.size()) {
               list = phones.subList(j * 50, phones.size());

            }else {
                 list = phones.subList(j * 50, (j + 1) * 50);

            }
            System.out.println(JSON.toJSONString(list));

                    batch.setCellPhones(list);
        batch.setSmsType(12);
        batch.setAppName("qdd");
        sendSmsService.sendBatchSms(batch);

        }

    }

    @Test
    public void testSingle(){
        SmsRequest smsRequest = new SmsRequest();
        smsRequest.setSmsType(1);
        smsRequest.setCellphone("18621945609");
        smsRequest.setAppName("xxx");
        sendSmsService.sendSingleSms(smsRequest);
    }
}
